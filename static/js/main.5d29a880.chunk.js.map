{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","todosWithUser","userId","usersFromServer","find","App","useState","titleInput","setTitleInput","userSelectedByName","setUserSelectedByName","isFormChecked","setFormChecked","setTodos","MaxId","Math","max","addNewTodo","selectedUser","newTodo","prevTodos","action","method","onSubmit","event","preventDefault","trim","type","value","placeholder","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d29a880.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${email}`}\n    >\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      key={id}\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst getUserById = (userId: number) => usersFromServer\n  .find(user => user.id === userId);\n\nconst todosWithUser: Todo[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: getUserById(todo.userId) || null,\n  };\n});\n\nexport const App: React.FC = () => {\n  const [titleInput, setTitleInput] = useState('');\n  const [userSelectedByName, setUserSelectedByName] = useState('');\n  const [isFormChecked, setFormChecked] = useState(false);\n  const [todos, setTodos] = useState(todosWithUser);\n\n  const MaxId = Math.max(...todos.map(todo => todo.id));\n\n  const resetForm = () => {\n    setTitleInput('');\n    setUserSelectedByName('');\n    setFormChecked(false);\n  };\n\n  const addNewTodo = () => {\n    const selectedUser = usersFromServer\n      .find(user => user.name === userSelectedByName) as User;\n\n    const newTodo = {\n      id: MaxId + 1,\n      title: titleInput,\n      completed: false,\n      userId: selectedUser.id,\n      user: selectedUser,\n    };\n\n    setTodos(prevTodos => ([\n      ...prevTodos,\n      newTodo,\n    ]));\n\n    resetForm();\n  };\n\n  const handleSubmitTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setFormChecked(true);\n\n    if (titleInput && userSelectedByName && titleInput.trim() !== '') {\n      addNewTodo();\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        <h1>Add todo form</h1>\n\n        <form\n          action=\"/api/users\"\n          method=\"POST\"\n          onSubmit={handleSubmitTodo}\n        >\n\n          <div className=\"field\" />\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              value={titleInput}\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              onChange={(event) => setTitleInput(event.target.value)}\n            />\n          </label>\n\n          {(isFormChecked && !titleInput) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n\n          <div className=\"field\">\n            <label>\n              {'User: '}\n              <select\n                data-cy=\"userSelectedByName\"\n                value={userSelectedByName}\n                onChange={(event) => setUserSelectedByName(event.target.value)}\n              >\n                <option value=\"0\">Choose a user</option>\n                {usersFromServer.map(({ id, name }) => (\n                  <option key={id} value={name}>{name}</option>\n                ))}\n              </select>\n            </label>\n\n            {(isFormChecked && !userSelectedByName) && (\n              <span className=\"error\">Please choose a user</span>\n            )}\n          </div>\n\n          <button type=\"submit\" data-cy=\"submitButton\">\n            Add\n          </button>\n        </form>\n\n        <TodoList todos={todos} />\n      </div>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}